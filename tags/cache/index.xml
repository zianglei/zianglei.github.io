<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cache on Justin Lei</title><link>https://lza852.com/tags/cache/</link><description>Recent content in cache on Justin Lei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Justin Lei</copyright><lastBuildDate>Sun, 12 Sep 2021 13:36:31 +0800</lastBuildDate><atom:link href="https://lza852.com/tags/cache/index.xml" rel="self" type="application/rss+xml"/><item><title>cs:app 第六章 &amp; cachelab 记录</title><link>https://lza852.com/posts/2021-09-12-csapp-6/</link><pubDate>Sun, 12 Sep 2021 13:36:31 +0800</pubDate><guid>https://lza852.com/posts/2021-09-12-csapp-6/</guid><description>计算机的存储结构 在 CPU 的简单模型中，存储器系统是一个线性的字节数组，CPU 能够在常数时间内访问它，而实际上存储器系统是一个具有多种容量、成本、访问时间的存储设备的层次结构。
计算机程序具有“局部性”的特点，即程序倾向于一次又一次访问相同的数据项集合，或者倾向于访问邻近的数据项集合，因此我们可以使用具有较小访问时间的存储设备缓存这些频繁访问的数据，从而能够提高程序的运行时间。
局部性 局部性分为“时间局部性”和“空间局部性”，时间局部性指被引用过一次的内存位置很可能在不远的将在被再次引用，空间局部性指如果一个内存位置被引用了一次，那么程序可能在不远的将来引用附近的一个内存位置。
程序应该合理使用这两个局部性，因为不管是计算机系统还是操作系统，都尽可能利用程序的局部性设计缓存结构提高数据的访问速度。
程序对内存使用的局部性体现为对每个变量的引用模式
int sumvec(int v[N]) { int i, sum = 0; for (i = 0; i &amp;lt; N; ++i) { sum += v[i]; } return sum; } sumvec 函数对 sum 变量的访问符合时间局部性，对向量 v 的元素是按照在内存中存储的顺序读取的，因此，对于变量 v，函数有很好的空间局部性。
对于像这种顺序访问一个向量的元素的函数，具有步长为 1 的引用模式，也称之为顺序引用模式，如果步长为 k，即每隔 k 个元素进行访问，就称之为步长为 k 的引用模式，随着步长的提高，空间局部性也就下降。
而对于取指令的局部性，循环体具有较好的时间局部性和空间局部性。通常循环体越小，局部性越好。
缓存 在存储器层次中，高一级的存储设备通常是低一级存储设备的缓存，每级存储设备之间以“块”为单位转移数据。当程序需要第 k + 1 级的数据时，首先会在第 k 级的一个块中寻找数据，找到的结果分为若干情况：
缓存命中
如果数据刚好在第 k 级缓存，我们称之为“缓存命中”</description></item></channel></rss>