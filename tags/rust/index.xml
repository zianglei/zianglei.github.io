<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Justin Lei</title><link>https://lza852.com/tags/rust/</link><description>Recent content in Rust on Justin Lei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Justin Lei</copyright><lastBuildDate>Wed, 22 Sep 2021 17:17:00 +0800</lastBuildDate><atom:link href="https://lza852.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>CS110L Proj-1: DEET 简易调试器</title><link>https://lza852.com/posts/2021-09-22-cs110l-proj1/</link><pubDate>Wed, 22 Sep 2021 17:17:00 +0800</pubDate><guid>https://lza852.com/posts/2021-09-22-cs110l-proj1/</guid><description>实现 DEET 调试器，一个简易版的 GDB，支持进程调试、断点和单步调试等。通过 DEET 可以练习在 Rust 中如何使用多进程，如何使用 ptrace 管理进程等
Milestone 1：Run the inferior 第一步是要将我们要调试的进程运行起来，并通过 ptrace 控制调试进程的执行状态。
rust 提供了 std::process::Command 运行子进程，为了方便我们跟踪子进程的状态，我们需要使用 nix::sys::ptrace 提供的 traceme，在 pre_exec 阶段设置由 ptrace 跟踪子进程。
之后在 exec 执行后，子进程会进入暂停状态，我们需要通过 waitpid 检查子进程是否进入暂停状态，在暂停状态 waitpid 会返回 WaitStatus::stopped，可以通过检查返回值判断子进程是否处于 stopped 状态。
在子进程停止后，我们需要让子进程再继续运行，在 inferior 结构体加入 cont 函数，调用 ptrace 的 cont 函数，并使用 wait（也是调用的 waitpid）等待子进程执行完毕，通过返回状态判断子进程是否结束/信号原因退出/暂停状态
Milestone 2：Stopping, resuming, and restarting the inferior 在将子进程运行起来之后，我们需要有能力控制子进程，可以停止、恢复和重启子进程（例如子进程死锁之后需要强制停止子进程）。
如果一个进程被 ptrace 追踪，那么当使用 CTRL+C（发送 SIGINT 信号）的时候，会暂停而不是停止，方便后续查看调用栈等操作。
因此在 Milestone 2，DEET 需要加入 continue 命令，负责恢复被暂停的进程。此外，需要考虑以下几种情况：</description></item><item><title>CS110L Week 3</title><link>https://lza852.com/posts/2021-09-07-cs110l-week3/</link><pubDate>Tue, 07 Sep 2021 21:15:25 +0800</pubDate><guid>https://lza852.com/posts/2021-09-07-cs110l-week3/</guid><description>Part 1 使用 Rust 实现一个小工具 inspect-fds，查看进程打开的文件描述符信息。
找到一个进程打开的所有文件描述符 一个进程打开的文件描述符存放在 /proc/$pid/fd 文件夹下。
因此使用 std::fs::read_dir 遍历当前路径，由于要求 list_fds 函数返回 Option&amp;lt;Vec&amp;lt;usize&amp;raquo;，但是 std::fs::read_dir 返回的是 Result，因此我们可以使用 Result.ok()? 将 Result 转换为 Option，当 Result 返回 Err 的时候，会转换为 None
for entry in fs::read_dir(fd_path).ok()? { let entry = entry.ok()?; let fd = entry.file_name() .into_string().ok()? .parse::&amp;lt;usize&amp;gt;().ok()?; open_fds.push(fd); } 注意在使用 vscode remote 远程连接时，每个进程会多出 19 和 99 两个文件描述符，查看它们指向的描述符分别是 /dev/ptmx 和 vscode remote 创建的文件。
/dev/ptmx 是 Linux 的伪终端，当打开时，会自动创建 master 和 slave（slave 位于 /dev/pts/ 下），为了实现虚拟化的目标，伪终端模拟器通过master发送键盘输入，bash 等终端进程通过 slave 接收，然后将执行结果通过 slave 发送，伪终端模拟器通过 master 接收处理结果，显示到显示器上。</description></item><item><title>CS110L Week 2</title><link>https://lza852.com/posts/2021-09-04-cs110l-week2/</link><pubDate>Sat, 04 Sep 2021 10:08:48 +0800</pubDate><guid>https://lza852.com/posts/2021-09-04-cs110l-week2/</guid><description>Rust 资源的所有权 Rust 中每个变量都有生命周期和所有权，在创建引用的时候，相当于所有权借用（borrow），编译器会要求程序正确处理资源的所有权。
所有权借用图示流程可以参考这篇文章。这里贴一张里面的图片，比较清楚的展示所有权的借用过程
总结下来就是
引用的生命周期不能超过原资源的生命周期，且引用不能被移动 可变引用和不可变引用不能共存，可以同时创建多个不可变引用，但是可变引用只能创建一个，并可以降级为不可变引用。 不可变引用的时候，原资源能拷贝，但不能移动 可变引用的时候，原资源不能拷贝，也不能移动 当使用值或者引用的形式作为参数传给函数时，对应的使用权也会转移到函数内部。即如果传递值，则相对应的资源所有权就传递到函数内，除非函数再将所有权返回，否则在函数调用者一侧就无法再次使用该资源。
代码示例 fn main() { let s1 = String::from(&amp;#34;hello&amp;#34;); let mut v = Vec::new(); v.push(s1); // 此处不能编译，因为此处发生了copy，但是 String 并没有实现 // Copy trait，建议使用引用借用使用权 let s2: String = v[0]; println!(&amp;#34;{}&amp;#34;, s2); } fn main() { let mut s = String::from(&amp;#34;hello&amp;#34;); let ref1 = &amp;amp;s; let ref2 = &amp;amp;ref1; let ref3 = &amp;amp;ref2; // 此处资源发生移动，无法编译 s = String::from(&amp;#34;goodbye&amp;#34;); println!</description></item><item><title>CS110L Week 1</title><link>https://lza852.com/posts/2021-09-02-cs110l-week1/</link><pubDate>Thu, 02 Sep 2021 12:29:46 +0800</pubDate><guid>https://lza852.com/posts/2021-09-02-cs110l-week1/</guid><description>CS110L 主要关注的是系统编程中的安全问题，使用 Rust 完成一系列实验和实现两个小项目，适合用来熟悉 Rust 的使用
➡️ Week 1 作业网页
程序分析方法 静态分析 静态分析通过分析源代码，找到存在问题的部门。但是只能处理比较简单的问题，由于存在“停机问题”，并不能找到所有的问题。
停机问题（halting problem） 停机：某段程序在接受输入后，能在有限长的时间内运行出结果。停机问题表示我们无法通过一个工具判断任意程序的停机问题，总会有一些程序无法判断是否停机。
证明：使用反证法，假设 H 能够判断所有输入是否停机，那么我们构造程序 K，使得 K 输出与 H 相反的结果。那么我们将 K 做为 K 的输入，那么当 K 返回不停机时，证明 H 表明 K 停机；如果 K 返回停机，证明 H 表明 K 不停机，相互矛盾。
这种证明与“理发师悖论”相同。所以我们无法只通过静态分析判断所有的程序代码是否会出现问题。
Linter Linter 使用类似于文本查找的途径寻找常见的错误，常见的 linter 工具有 clang-tidy，通常只用于代码风格的保证。
数据流分析 通过分析程序的执行数据流来检测例如变量未初始化，函数返回未释放内存等错误。
数据流分析会跟随每一个分支，即使这个分支在一些情况下是不可能执行的。而且数据流分析的致命弱点是会产生假阳性错误报告，因此数据流分析要保证有好的信噪比。
前置条件与后置条件 相比与分析函数所使用的所有上下文（不太可能），我们可以单独验证某个函数的前置条件和后置条件（也即是函数执行之后会达到什么效果，返回什么结果），如果所有函数的前置条件和后置条件都满足，就可以将这些函数全部放在一起，只要保证相互条件都满足即可。
在 C 中，编译器并不清楚一个函数的前置条件或者后置条件，也并没有提供语法机制指定函数的条件。如果编译器知道了这些信息，就可以通过这些信息判断代码中函数是否满足这些条件。
动态分析 实际运行程序，根据运行结果和现象判断是否出现问题。动态分析需要使用大量不同的测试输入来决定程序是否有问题，但是也很难用测试输入覆盖到所有会出现问题的情况。
Valgrind Valgrind 是动态分析常用工具，其原理是提供一个虚拟化的 CPU（称为 core），然后通过不同的 tool（比如 memcheck）在原始二进制机器吗中插入自身的代码，最终在 core 中执行，采取 JIT 技术动态地将机器记录堆读写的过程，缺点：无法检测栈类型的内存溢出，因为栈本身就是一大块内存，并不需要进行分配操作，且执行效率较低。
LLVM 使用多种 sanitizers ，通过编译，在代码中打桩，分析源代码中的内存读写行为来找到各种问题。包括 AddressSanitizer，LeakSanitizer，MemorySanitizer，UndefinedBehaviorSanitizer，ThreadSanitizer，可以分析出非法地址、内存泄漏等行为，在编译的时候通过 -fsanitize 指定要使用的 sanitizer。</description></item></channel></rss>