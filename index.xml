<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justin Lei</title><link>https://lza852.com/</link><description>Recent content on Justin Lei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Justin Lei</copyright><lastBuildDate>Tue, 17 Aug 2021 10:22:36 +0800</lastBuildDate><atom:link href="https://lza852.com/index.xml" rel="self" type="application/rss+xml"/><item><title>cs:app 第三章 &amp; bomb lab记录</title><link>https://lza852.com/posts/2021-08-17-csapp-2/</link><pubDate>Tue, 17 Aug 2021 10:22:36 +0800</pubDate><guid>https://lza852.com/posts/2021-08-17-csapp-2/</guid><description>程序代码的汇编表示 寄存器 整数寄存器 条件码寄存器 CF：进位标志，表示最高位产生了进位 ZF：零标志，最近的操作结果为0 SF：符号标志，最近的操作结果为负数 OF：溢出标志，导致补码溢出，正溢出或负溢出 栈寄存器 栈指针%rsp保存栈顶元素的数据，将数据压入栈是将%rsp-8，然后存储数据；弹出栈是将M[%rsp]取出，然后%rsp+8。
编译器会为每个函数计算需要的栈空间，然后在函数的开头对%rsp进行减操作，分配栈空间，在函数结束返回的时候对%rsp加操作，恢复栈空间
pc寄存器 %rip代表指令计数器，表示当前执行指令的地址
ATT与Intel格式的区别 ATT是AT&amp;amp;T提出的汇编代码格式，GCC、OBJDUMP等工具的默认格式。而Intel格式是Intel提出的，通常用于Microsoft的工具和Intel自身的文档。
两者区别是
Intel省略了指示大小的后缀，例如l，q等 Intel省略了寄存器的‘%’前缀 Intel使用QWORD PTR [rbx]来表示内存位置，而不是(rbx)这种形式 在带有多个操作数的情况下，操作数的顺序相反，即目的寄存器在前，源寄存器在后。 在gcc生成汇编代码的时候，可以使用-masm=intel选项指定生成Intel格式的汇编代码，默认是ATT格式。
常见指令 条件指令 常见TEST %rax, %rax，判断%rax是否等于0，如果等于0，会设置ZF标志位，如果后跟je指令，就满足条件，跳转
跳转指令 在跳转的时候，有些指令会采用PC相对寻址，即指令编码中只记录offset，实际跳转的目的指令地址是next PC + offset，即下一条指令地址+offset，而不是当前PC的值
算术运算 add S,D -&amp;gt; D = D + S
sub S,D -&amp;gt; D = D - S
数据传送 mov S,D -&amp;gt; D = S
读取有效地址 lea并不会从指定地址读取数据到目的位置，而是将地址存储到目的位置
操作数指示符 栈帧 x86-64提供六个寄存器用于函数参数传递（%rdi, %rsi, %rdx, %rcx, %r8, %r9），每一个调用的函数都会事先在栈上开辟空间，填入需要存储的变量。</description></item><item><title>cs:app 第二章 &amp; datalab实验记录</title><link>https://lza852.com/posts/2021-08-14-csapp-1/</link><pubDate>Wed, 11 Aug 2021 14:27:13 +0800</pubDate><guid>https://lza852.com/posts/2021-08-14-csapp-1/</guid><description>阅读笔记 字长 字长（word size）指的是指针数据的大小，也就是内存一次周期能读取到的数据长度。通常我们说的32bits/64bits就指的是字长。但是在微软API里面，定义WORD为16bits（为了对应Intel 8086最开始的时候16bits的字长），还有DWORD（32bits）和QWORD（64bits）。
布尔运算及定律 吸收律：$A+(A * B) = A$，$A * (A + B) = A$
分配律：$A(B+C) = AB + AC$，$A+(B*C) = (A+B)(A+C)$
德摩根定律：$\overline{AB} = \bar{A}+\bar{B}$​​​，$\overline{A+B} = \bar{A}\bar{B}$
异或 异或可以由与或非组合得出，即
a ^ b
= ~a · b + a · ~b
= a * ~a + b * ~b + ~a * b + a * ~b = (a + b) * (~a + ~b)</description></item></channel></rss>