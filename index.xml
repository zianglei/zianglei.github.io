<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justin Lei</title><link>https://lza852.com/</link><description>Recent content on Justin Lei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Justin Lei</copyright><lastBuildDate>Thu, 14 Apr 2022 17:48:07 +0800</lastBuildDate><atom:link href="https://lza852.com/index.xml" rel="self" type="application/rss+xml"/><item><title>迁移 PVE CT 到 VM</title><link>https://lza852.com/posts/2022-04-14-migrate-pve-ct/</link><pubDate>Thu, 14 Apr 2022 17:48:07 +0800</pubDate><guid>https://lza852.com/posts/2022-04-14-migrate-pve-ct/</guid><description>名词定义 CT：运行在 PVE 上要迁移的 ubuntu 源容器
VM：运行在 PVE 上的目标虚拟机
迁移步骤 在 PVE 中创建 VM，然后进入 desktop 镜像的 liveCD 模式，对 VM 上的硬盘（我的路径为 /dev/sda）进行分区和格式化。
默认分区为
/dev/sda1 为 fat32 文件系统的主分区，可启动，存放 bootloader /dev/sda2 为逻辑分区 /dev/sda5 为 ext4 文件系统格式的 Linux 分区 使用 fdisk 在 /dev/sda 上按照上述图片格式创建三个分区，并将 /dev/sda1 标记为 bootable （命令 a），然后使用命令格式化分区
mkfs.fat -F 32 /dev/sda1 mkfs.ext4 /dev/sda5 更新分区表并格式化之后，将 /dev/sda5 挂载（此处挂载到/mnt)，使用 rsync 将 CT 的内容拷贝到 /mnt/root，参考命令为
rsync -auHxv –numeric-ids –-exclude=/etc/network/* –-exclude=/proc/* –-exclude=/tmp/* –-exclude=/sys/* –-exclude=/dev/* –-exclude=/mnt/* –-exclude=/boot/* root@SRC-IP:/* /mnt/ 拷贝完成后，由于原本的 CT 使用的是宿主机的内核，因此拷贝后需要重新下载并安装内核，从而能够被 bootloader 发现，并且需要更新 bootloader 和 fstab，能够正确启动并挂载硬盘。</description></item><item><title>CS110L Proj-2: BalanceBeam 反向代理</title><link>https://lza852.com/posts/2021-10-19-cs110l-proj2/</link><pubDate>Tue, 19 Oct 2021 12:42:33 +0800</pubDate><guid>https://lza852.com/posts/2021-10-19-cs110l-proj2/</guid><description>实现一个简易的负载均衡代理，主要是熟悉 Rust 的异步 IO 用法
我使用的 rust 是 1.54 版本，在 2020 版的代码中，使用的是 clap 的 3.0.0-beta.1 版本，这个版本在 1.54 下编译不通过。在更换 clap 版本为 3.0.0-beta.5 并按照库文档修改之后，编译通过。
并且 2020 版的初始代码的第二个测试无法通过测试，不知道是否是 clap 版本变化的原因，要做对应修改。
上述两处变化对应的代码修改可以在这个提交中查看
Milestone 1 第一个变动是使用线程来处理各个连接。在 handle_connection 处使用 thread::spawn 创建线程，每个线程调用 handle_connection 处理连接。由于各个线程需要共享 ProxyState，因此需要使用 Arc 创建多线程恭喜的不可变引用。
for stream in listener.incoming() { if let Ok(stream) = stream { // Handle the connection! let state_ref = state.clone(); thread::spawn(move || { handle_connection(stream, &amp;amp;*state_ref); }); } } 如果使用 ThreadPool，就按照其中的文档创建 pool 并执行即可</description></item><item><title>CS110L Week 6</title><link>https://lza852.com/posts/2021-10-18-cs110l-week6/</link><pubDate>Mon, 18 Oct 2021 16:20:21 +0800</pubDate><guid>https://lza852.com/posts/2021-10-18-cs110l-week6/</guid><description>实现 parallel_map，使用多线程在向量上执行函数 F，返回所有执行结果
week6 实验主页在此
设计思路 分为主线程和工作线程两部分，主线程负责将输入的元素通过通道发送给工作线程，工作线程需要将执行结果返回给主线程，主线程负责将结果放入结果向量中，因此需要两个 channel。
由于需要将每个元素的执行结果按照原有的输入顺序返回，在给工作线程传递参数的时候需要将元素在向量中的位置一并发送。
注意 crossbeam_channel 在一端所有引用断开连接之后，另一段的 send/recv 才会跳出循环，因此注意找到所有的引用。在此处实现中，工作线程的输出端在主线程也会有一个引用，应该在所有工作线程创建完成后将该引用 drop 掉。
代码 fn parallel_map&amp;lt;T, U, F&amp;gt;(mut input_vec: Vec&amp;lt;T&amp;gt;, num_threads: usize, f: F) -&amp;gt; Vec&amp;lt;U&amp;gt; where F: FnOnce(T) -&amp;gt; U + Send + Copy + &amp;#39;static, T: Send + &amp;#39;static, U: Send + &amp;#39;static + Default, { let mut output_vec: Vec&amp;lt;U&amp;gt; = Vec::with_capacity(input_vec.len()); // TODO: implement parallel map! let (input_tx, input_rx) = crossbeam_channel::unbounded::&amp;lt;Data&amp;lt;T&amp;gt;&amp;gt;(); let (output_tx, output_rx) = crossbeam_channel::unbounded::&amp;lt;Data&amp;lt;U&amp;gt;&amp;gt;(); let mut threads = Vec::new(); for _ in 0.</description></item><item><title>PVE 6.4 AMD RX6600XT WIN10 显卡直通记录</title><link>https://lza852.com/posts/2021-10-13-pve-gpu-passthrough/</link><pubDate>Wed, 13 Oct 2021 12:51:11 +0800</pubDate><guid>https://lza852.com/posts/2021-10-13-pve-gpu-passthrough/</guid><description>PVE 做显卡直通经常出现错误代码 43 的情况，不出意外我也碰上了，下面是我的所有配置和操作步骤，也是折腾了半天，扒了很多论坛。虽然不知道哪个地方解决了问题，但是现在是能够稳定工作，所以发出来供参考。
主机配置 主板：ASUS B460M Pro
CPU：Intel i7-10700
显卡：AMD RX6600XT
PVE版本：6.4
配置步骤 首先需要更新主板的 BIOS 到最新版本，然后开启主板的虚拟化功能，包括 VT-d、IOMMU、CPU 虚拟化，关闭 CSM，然后最好将主板的首选显卡改为 PEG。
然后按照 PVE 官方的教程配置到 Verify IOMMU Isolation 这一步，在 PVE 中使用下面脚本检查是否显卡在一个单独的 IOMMU 组里
shopt -s nullglob for g in `find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V`; do echo &amp;#34;IOMMU Group ${g##*/}:&amp;#34; for d in $g/devices/*; do echo -e &amp;#34;\t$(lspci -nns ${d##*/})&amp;#34; done; done; 如果有类似下面的输出，就代表显卡在一个单独的 IOMMU 组里面。</description></item><item><title>CS110L Proj-1: DEET 简易调试器</title><link>https://lza852.com/posts/2021-09-22-cs110l-proj1/</link><pubDate>Wed, 22 Sep 2021 17:17:00 +0800</pubDate><guid>https://lza852.com/posts/2021-09-22-cs110l-proj1/</guid><description>实现 DEET 调试器，一个简易版的 GDB，支持进程调试、断点和单步调试等。通过 DEET 可以练习在 Rust 中如何使用多进程，如何使用 ptrace 管理进程等
Milestone 1：Run the inferior 第一步是要将我们要调试的进程运行起来，并通过 ptrace 控制调试进程的执行状态。
rust 提供了 std::process::Command 运行子进程，为了方便我们跟踪子进程的状态，我们需要使用 nix::sys::ptrace 提供的 traceme，在 pre_exec 阶段设置由 ptrace 跟踪子进程。
之后在 exec 执行后，子进程会进入暂停状态，我们需要通过 waitpid 检查子进程是否进入暂停状态，在暂停状态 waitpid 会返回 WaitStatus::stopped，可以通过检查返回值判断子进程是否处于 stopped 状态。
在子进程停止后，我们需要让子进程再继续运行，在 inferior 结构体加入 cont 函数，调用 ptrace 的 cont 函数，并使用 wait（也是调用的 waitpid）等待子进程执行完毕，通过返回状态判断子进程是否结束/信号原因退出/暂停状态
Milestone 2：Stopping, resuming, and restarting the inferior 在将子进程运行起来之后，我们需要有能力控制子进程，可以停止、恢复和重启子进程（例如子进程死锁之后需要强制停止子进程）。
如果一个进程被 ptrace 追踪，那么当使用 CTRL+C（发送 SIGINT 信号）的时候，会暂停而不是停止，方便后续查看调用栈等操作。
因此在 Milestone 2，DEET 需要加入 continue 命令，负责恢复被暂停的进程。此外，需要考虑以下几种情况：</description></item><item><title>cs:app 第六章 &amp; cachelab 记录</title><link>https://lza852.com/posts/2021-09-12-csapp-6/</link><pubDate>Sun, 12 Sep 2021 13:36:31 +0800</pubDate><guid>https://lza852.com/posts/2021-09-12-csapp-6/</guid><description>计算机的存储结构 在 CPU 的简单模型中，存储器系统是一个线性的字节数组，CPU 能够在常数时间内访问它，而实际上存储器系统是一个具有多种容量、成本、访问时间的存储设备的层次结构。
计算机程序具有“局部性”的特点，即程序倾向于一次又一次访问相同的数据项集合，或者倾向于访问邻近的数据项集合，因此我们可以使用具有较小访问时间的存储设备缓存这些频繁访问的数据，从而能够提高程序的运行时间。
局部性 局部性分为“时间局部性”和“空间局部性”，时间局部性指被引用过一次的内存位置很可能在不远的将在被再次引用，空间局部性指如果一个内存位置被引用了一次，那么程序可能在不远的将来引用附近的一个内存位置。
程序应该合理使用这两个局部性，因为不管是计算机系统还是操作系统，都尽可能利用程序的局部性设计缓存结构提高数据的访问速度。
程序对内存使用的局部性体现为对每个变量的引用模式
int sumvec(int v[N]) { int i, sum = 0; for (i = 0; i &amp;lt; N; ++i) { sum += v[i]; } return sum; } sumvec 函数对 sum 变量的访问符合时间局部性，对向量 v 的元素是按照在内存中存储的顺序读取的，因此，对于变量 v，函数有很好的空间局部性。
对于像这种顺序访问一个向量的元素的函数，具有步长为 1 的引用模式，也称之为顺序引用模式，如果步长为 k，即每隔 k 个元素进行访问，就称之为步长为 k 的引用模式，随着步长的提高，空间局部性也就下降。
而对于取指令的局部性，循环体具有较好的时间局部性和空间局部性。通常循环体越小，局部性越好。
缓存 在存储器层次中，高一级的存储设备通常是低一级存储设备的缓存，每级存储设备之间以“块”为单位转移数据。当程序需要第 k + 1 级的数据时，首先会在第 k 级的一个块中寻找数据，找到的结果分为若干情况：
缓存命中
如果数据刚好在第 k 级缓存，我们称之为“缓存命中”</description></item><item><title>git 提交信息的七条建议</title><link>https://lza852.com/posts/2021-09-12-git-commit-message-rule/</link><pubDate>Sun, 12 Sep 2021 10:45:50 +0800</pubDate><guid>https://lza852.com/posts/2021-09-12-git-commit-message-rule/</guid><description>觉得这篇文章写的不错，翻译过来作为参考。
好的提交信息的重要性 良好的提交信息能够帮助开发者了解代码更改的上下文背景，并且能够帮助其他开发者更好的进行项目维护。
写出一个好的提交信息的七条建议 1. 使用空行分开标题和内容 git commit 的文档页面给出了标题的建议
Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, Git-format-patch(1) turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</description></item><item><title>CS110L Week 3</title><link>https://lza852.com/posts/2021-09-07-cs110l-week3/</link><pubDate>Tue, 07 Sep 2021 21:15:25 +0800</pubDate><guid>https://lza852.com/posts/2021-09-07-cs110l-week3/</guid><description>Part 1 使用 Rust 实现一个小工具 inspect-fds，查看进程打开的文件描述符信息。
找到一个进程打开的所有文件描述符 一个进程打开的文件描述符存放在 /proc/$pid/fd 文件夹下。
因此使用 std::fs::read_dir 遍历当前路径，由于要求 list_fds 函数返回 Option&amp;lt;Vec&amp;lt;usize&amp;raquo;，但是 std::fs::read_dir 返回的是 Result，因此我们可以使用 Result.ok()? 将 Result 转换为 Option，当 Result 返回 Err 的时候，会转换为 None
for entry in fs::read_dir(fd_path).ok()? { let entry = entry.ok()?; let fd = entry.file_name() .into_string().ok()? .parse::&amp;lt;usize&amp;gt;().ok()?; open_fds.push(fd); } 注意在使用 vscode remote 远程连接时，每个进程会多出 19 和 99 两个文件描述符，查看它们指向的描述符分别是 /dev/ptmx 和 vscode remote 创建的文件。
/dev/ptmx 是 Linux 的伪终端，当打开时，会自动创建 master 和 slave（slave 位于 /dev/pts/ 下），为了实现虚拟化的目标，伪终端模拟器通过master发送键盘输入，bash 等终端进程通过 slave 接收，然后将执行结果通过 slave 发送，伪终端模拟器通过 master 接收处理结果，显示到显示器上。</description></item><item><title>CS110L Week 2</title><link>https://lza852.com/posts/2021-09-04-cs110l-week2/</link><pubDate>Sat, 04 Sep 2021 10:08:48 +0800</pubDate><guid>https://lza852.com/posts/2021-09-04-cs110l-week2/</guid><description>Rust 资源的所有权 Rust 中每个变量都有生命周期和所有权，在创建引用的时候，相当于所有权借用（borrow），编译器会要求程序正确处理资源的所有权。
所有权借用图示流程可以参考这篇文章。这里贴一张里面的图片，比较清楚的展示所有权的借用过程
总结下来就是
引用的生命周期不能超过原资源的生命周期，且引用不能被移动 可变引用和不可变引用不能共存，可以同时创建多个不可变引用，但是可变引用只能创建一个，并可以降级为不可变引用。 不可变引用的时候，原资源能拷贝，但不能移动 可变引用的时候，原资源不能拷贝，也不能移动 当使用值或者引用的形式作为参数传给函数时，对应的使用权也会转移到函数内部。即如果传递值，则相对应的资源所有权就传递到函数内，除非函数再将所有权返回，否则在函数调用者一侧就无法再次使用该资源。
代码示例 fn main() { let s1 = String::from(&amp;#34;hello&amp;#34;); let mut v = Vec::new(); v.push(s1); // 此处不能编译，因为此处发生了copy，但是 String 并没有实现 // Copy trait，建议使用引用借用使用权 let s2: String = v[0]; println!(&amp;#34;{}&amp;#34;, s2); } fn main() { let mut s = String::from(&amp;#34;hello&amp;#34;); let ref1 = &amp;amp;s; let ref2 = &amp;amp;ref1; let ref3 = &amp;amp;ref2; // 此处资源发生移动，无法编译 s = String::from(&amp;#34;goodbye&amp;#34;); println!</description></item><item><title>CS110L Week 1</title><link>https://lza852.com/posts/2021-09-02-cs110l-week1/</link><pubDate>Thu, 02 Sep 2021 12:29:46 +0800</pubDate><guid>https://lza852.com/posts/2021-09-02-cs110l-week1/</guid><description>CS110L 主要关注的是系统编程中的安全问题，使用 Rust 完成一系列实验和实现两个小项目，适合用来熟悉 Rust 的使用
➡️ Week 1 作业网页
程序分析方法 静态分析 静态分析通过分析源代码，找到存在问题的部门。但是只能处理比较简单的问题，由于存在“停机问题”，并不能找到所有的问题。
停机问题（halting problem） 停机：某段程序在接受输入后，能在有限长的时间内运行出结果。停机问题表示我们无法通过一个工具判断任意程序的停机问题，总会有一些程序无法判断是否停机。
证明：使用反证法，假设 H 能够判断所有输入是否停机，那么我们构造程序 K，使得 K 输出与 H 相反的结果。那么我们将 K 做为 K 的输入，那么当 K 返回不停机时，证明 H 表明 K 停机；如果 K 返回停机，证明 H 表明 K 不停机，相互矛盾。
这种证明与“理发师悖论”相同。所以我们无法只通过静态分析判断所有的程序代码是否会出现问题。
Linter Linter 使用类似于文本查找的途径寻找常见的错误，常见的 linter 工具有 clang-tidy，通常只用于代码风格的保证。
数据流分析 通过分析程序的执行数据流来检测例如变量未初始化，函数返回未释放内存等错误。
数据流分析会跟随每一个分支，即使这个分支在一些情况下是不可能执行的。而且数据流分析的致命弱点是会产生假阳性错误报告，因此数据流分析要保证有好的信噪比。
前置条件与后置条件 相比与分析函数所使用的所有上下文（不太可能），我们可以单独验证某个函数的前置条件和后置条件（也即是函数执行之后会达到什么效果，返回什么结果），如果所有函数的前置条件和后置条件都满足，就可以将这些函数全部放在一起，只要保证相互条件都满足即可。
在 C 中，编译器并不清楚一个函数的前置条件或者后置条件，也并没有提供语法机制指定函数的条件。如果编译器知道了这些信息，就可以通过这些信息判断代码中函数是否满足这些条件。
动态分析 实际运行程序，根据运行结果和现象判断是否出现问题。动态分析需要使用大量不同的测试输入来决定程序是否有问题，但是也很难用测试输入覆盖到所有会出现问题的情况。
Valgrind Valgrind 是动态分析常用工具，其原理是提供一个虚拟化的 CPU（称为 core），然后通过不同的 tool（比如 memcheck）在原始二进制机器吗中插入自身的代码，最终在 core 中执行，采取 JIT 技术动态地将机器记录堆读写的过程，缺点：无法检测栈类型的内存溢出，因为栈本身就是一大块内存，并不需要进行分配操作，且执行效率较低。
LLVM 使用多种 sanitizers ，通过编译，在代码中打桩，分析源代码中的内存读写行为来找到各种问题。包括 AddressSanitizer，LeakSanitizer，MemorySanitizer，UndefinedBehaviorSanitizer，ThreadSanitizer，可以分析出非法地址、内存泄漏等行为，在编译的时候通过 -fsanitize 指定要使用的 sanitizer。</description></item><item><title>cs:app 第五章</title><link>https://lza852.com/posts/2021-08-31-csapp-5/</link><pubDate>Tue, 31 Aug 2021 10:31:13 +0800</pubDate><guid>https://lza852.com/posts/2021-08-31-csapp-5/</guid><description>优化程序性能 内存别名使用 对于下面两个函数来说，执行相同的功能，但是在 twiddle2 效率更高一点（twiddle2 只执行 3 次内存引用，而 twiddle1 需要 6 次），在编译器优化的时候，可能不会把 twiddle1 优化为 twiddle 2
void twiddle1(long *xp, long *yp) { *xp += *yp; *xp += *yp; } void twiddle2(long *xp, long *yp) { *xp += 2* *yp; } 那是因为有可能 xp == yp, 这样 twiddle1 会将 xp 的值增加 4 倍，而 twiddle2 会将 xp 的值增加 3 倍，这种情况叫做内存别名使用，因此编译器在进行安全的优化的时候必须假设指针有可能相同。
而对于那些具有副作用的函数（例如修改全局变量），GCC 总是假设函数会有副作用，保持所有的函数调用不变。
程序性能的表示 CPE （ 每元素的周期数）可以表明一个程序的性能，对于一个数组循环来说，不同形式的循环通过最小二乘拟合得到的线性公式的系数（斜率）会有所差别，我们把这个斜率就叫做每元素的周期数。
例如
void psum1(float a[], float p[], long n) { long i; p[0] = a[0]; for(i = 1; i &amp;lt; n; ++i) p[i] = p[i - 1] + a[i]; } void psum2(float a[], float p[], long n) { long i; p[0] = a[0]; for (i = 1; i &amp;lt; n - 1; i += 2) { float mid_val = p[i - 1] + a[i]; p[i] = mid_val; p[i + 1] = mid_val + a[i + 1]; } if (i &amp;lt; n) p[i] = p[i - 1] + a[i]; } 统计两个函数的在不同 n 的情况下的执行周期可以得到 psum1 的运行时间近似为 368 + 9.</description></item><item><title>cs:app attacklab 记录</title><link>https://lza852.com/posts/2021-08-23-csapp-3/</link><pubDate>Mon, 23 Aug 2021 08:35:00 +0800</pubDate><guid>https://lza852.com/posts/2021-08-23-csapp-3/</guid><description>代码在此
常见的攻击方式 缓存区溢出 由于C不对数组边界进行检查，当在栈上为数组分配空间时，如果写入的数据超过了数组空间，就会覆盖栈中存储的状态信息。通常使用字符串缓存区溢出来实现。
char *gets(char* s) { int c; char *dest = s; // 没有对边界进行检查 while ((c = getchar()) != &amp;#39;\n&amp;#39; &amp;amp;&amp;amp; c != EOF) *dest++ = c; if (c == EOF &amp;amp;&amp;amp; dest == s) return NULL; *dest++ = &amp;#39;\0&amp;#39;; return s; } 生成的汇编代码如下
echo: subq $24, %rsp movq %rsp, %rdi call gets movq %rsp, %rdi call puts addq $24, %rsp ret 根据汇编代码可以看出，函数分配了24字节的栈空间，因此如果写入的字符串超过了24个字符，那么栈中的返回地址就会被覆盖；如果超过了32字节（24+8），那么调用者中保存的状态也会被覆盖。（栈中保存的数据格式参考这里）</description></item><item><title>cs:app 第三章 &amp; bomblab 记录</title><link>https://lza852.com/posts/2021-08-17-csapp-2/</link><pubDate>Tue, 17 Aug 2021 10:22:36 +0800</pubDate><guid>https://lza852.com/posts/2021-08-17-csapp-2/</guid><description>这里可以找到实验代码
程序代码的汇编表示 寄存器 整数寄存器 条件码寄存器 CF：进位标志，表示最高位产生了进位 ZF：零标志，最近的操作结果为0 SF：符号标志，最近的操作结果为负数 OF：溢出标志，导致补码溢出，正溢出或负溢出 栈寄存器 栈指针 %rsp 保存栈顶元素的数据，将数据压入栈是将 %rsp-8，然后存储数据；弹出栈是将 M[%rsp] 取出，然后%rsp+8。
编译器会为每个函数计算需要的栈空间，然后在函数的开头对%rsp进行减操作，分配栈空间，在函数结束返回的时候对%rsp加操作，恢复栈空间
pc寄存器 %rip 代表指令计数器，表示当前执行指令的地址
ATT与Intel格式的区别 ATT是AT&amp;amp;T提出的汇编代码格式，GCC、OBJDUMP等工具的默认格式。而Intel格式是Intel提出的，通常用于Microsoft的工具和Intel自身的文档。
两者区别是
Intel省略了指示大小的后缀，例如l，q等 Intel省略了寄存器的‘%’前缀 Intel使用QWORD PTR [rbx]来表示内存位置，而不是(rbx)这种形式 在带有多个操作数的情况下，操作数的顺序相反，即目的寄存器在前，源寄存器在后。 在gcc生成汇编代码的时候，可以使用-masm=intel选项指定生成Intel格式的汇编代码，默认是ATT格式。
常见指令 条件指令 常见TEST %rax, %rax，判断%rax是否等于0，如果等于0，会设置ZF标志位，如果后跟je指令，就满足条件，跳转
跳转指令 在跳转的时候，有些指令会采用PC相对寻址，即指令编码中只记录offset，实际跳转的目的指令地址是next PC + offset，即下一条指令地址+offset，而不是当前PC的值
算术运算 add S,D -&amp;gt; D = D + S
sub S,D -&amp;gt; D = D - S
数据传送 mov S,D -&amp;gt; D = S
注意movl传送四字节，会将高位四字节设置为0，这样是因为 x86-64 的惯例是任何为寄存器生成 32 位值的指令都会把该寄存器的高位部分置成0。</description></item><item><title>cs:app 第二章 &amp; datalab 记录</title><link>https://lza852.com/posts/2021-08-14-csapp-1/</link><pubDate>Wed, 11 Aug 2021 14:27:13 +0800</pubDate><guid>https://lza852.com/posts/2021-08-14-csapp-1/</guid><description>这里可以找到实验代码
阅读笔记 字长 字长（word size）指的是指针数据的大小，也就是内存一次周期能读取到的数据长度。通常我们说的32bits/64bits就指的是字长。但是在微软API里面，定义WORD为16bits（为了对应Intel 8086最开始的时候16bits的字长），还有DWORD（32bits）和QWORD（64bits）。
布尔运算及定律 吸收律：$A+(A * B) = A$，$A * (A + B) = A$
分配律：$A(B+C) = AB + AC$，$A+(B*C) = (A+B)(A+C)$
德摩根定律：$\overline{AB} = \bar{A}+\bar{B}$​​​，$\overline{A+B} = \bar{A}\bar{B}$
异或 异或可以由与或非组合得出，即
a ^ b
= ~a · b + a · ~b
= a * ~a + b * ~b + ~a * b + a * ~b = (a + b) * (~a + ~b)</description></item></channel></rss>