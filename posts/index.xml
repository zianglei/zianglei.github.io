<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Justin Lei</title><link>https://lza852.com/posts/</link><description>Recent content in Posts on Justin Lei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Justin Lei</copyright><lastBuildDate>Thu, 02 Sep 2021 12:29:46 +0800</lastBuildDate><atom:link href="https://lza852.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>CS110L Week 1 笔记</title><link>https://lza852.com/posts/2021-09-02-cs110l-week1/</link><pubDate>Thu, 02 Sep 2021 12:29:46 +0800</pubDate><guid>https://lza852.com/posts/2021-09-02-cs110l-week1/</guid><description>CS110L 主要关注的是系统编程中的安全问题，使用 Rust 完成一系列实验和实现两个小项目，适合用来熟悉 Rust 的使用
➡️ Week 1 作业网页
程序分析方法 静态分析 静态分析通过分析源代码，找到存在问题的部门。但是只能处理比较简单的问题，由于存在“停机问题”，并不能找到所有的问题。
停机问题（halting problem） 停机：某段程序在接受输入后，能在有限长的时间内运行出结果。停机问题表示我们无法通过一个工具判断任意程序的停机问题，总会有一些程序无法判断是否停机。
证明：使用反证法，假设 H 能够判断所有输入是否停机，那么我们构造程序 K，使得 K 输出与 H 相反的结果。那么我们将 K 做为 K 的输入，那么当 K 返回不停机时，证明 H 表明 K 停机；如果 K 返回停机，证明 H 表明 K 不停机，相互矛盾。
这种证明与“理发师悖论”相同。所以我们无法只通过静态分析判断所有的程序代码是否会出现问题。
Linter Linter 使用类似于文本查找的途径寻找常见的错误，常见的 linter 工具有 clang-tidy，通常只用于代码风格的保证。
数据流分析 通过分析程序的执行数据流来检测例如变量未初始化，函数返回未释放内存等错误。
数据流分析会跟随每一个分支，即使这个分支在一些情况下是不可能执行的。而且数据流分析的致命弱点是会产生假阳性错误报告，因此数据流分析要保证有好的信噪比。
前置条件与后置条件 相比与分析函数所使用的所有上下文（不太可能），我们可以单独验证某个函数的前置条件和后置条件（也即是函数执行之后会达到什么效果，返回什么结果），如果所有函数的前置条件和后置条件都满足，就可以将这些函数全部放在一起，只要保证相互条件都满足即可。
在 C 中，编译器并不清楚一个函数的前置条件或者后置条件，也并没有提供语法机制指定函数的条件。如果编译器知道了这些信息，就可以通过这些信息判断代码中函数是否满足这些条件。
动态分析 实际运行程序，根据运行结果和现象判断是否出现问题。动态分析需要使用大量不同的测试输入来决定程序是否有问题，但是也很难用测试输入覆盖到所有会出现问题的情况。
Valgrind Valgrind 是动态分析常用工具，其原理是提供一个虚拟化的 CPU（称为 core），然后通过不同的 tool（比如 memcheck）在原始二进制机器吗中插入自身的代码，最终在 core 中执行，采取 JIT 技术动态地将机器记录堆读写的过程，缺点：无法检测栈类型的内存溢出，因为栈本身就是一大块内存，并不需要进行分配操作，且执行效率较低。
LLVM 使用多种 sanitizers ，通过编译，在代码中打桩，分析源代码中的内存读写行为来找到各种问题。包括 AddressSanitizer，LeakSanitizer，MemorySanitizer，UndefinedBehaviorSanitizer，ThreadSanitizer，可以分析出非法地址、内存泄漏等行为，在编译的时候通过 -fsanitize 指定要使用的 sanitizer。</description></item><item><title>cs:app 第五章</title><link>https://lza852.com/posts/2021-08-31-csapp-5/</link><pubDate>Tue, 31 Aug 2021 10:31:13 +0800</pubDate><guid>https://lza852.com/posts/2021-08-31-csapp-5/</guid><description>优化程序性能 内存别名使用 对于下面两个函数来说，执行相同的功能，但是在 twiddle2 效率更高一点（twiddle2 只执行 3 次内存引用，而 twiddle1 需要 6 次），在编译器优化的时候，可能不会把 twiddle1 优化为 twiddle 2
void twiddle1(long *xp, long *yp) { *xp += *yp; *xp += *yp; } void twiddle2(long *xp, long *yp) { *xp += 2* *yp; } 那是因为有可能 xp == yp, 这样 twiddle1 会将 xp 的值增加 4 倍，而 twiddle2 会将 xp 的值增加 3 倍，这种情况叫做内存别名使用，因此编译器在进行安全的优化的时候必须假设指针有可能相同。
而对于那些具有副作用的函数（例如修改全局变量），GCC 总是假设函数会有副作用，保持所有的函数调用不变。
程序性能的表示 CPE （ 每元素的周期数）可以表明一个程序的性能，对于一个数组循环来说，不同形式的循环通过最小二乘拟合得到的线性公式的系数（斜率）会有所差别，我们把这个斜率就叫做每元素的周期数。
例如
void psum1(float a[], float p[], long n) { long i; p[0] = a[0]; for(i = 1; i &amp;lt; n; ++i) p[i] = p[i - 1] + a[i]; } void psum2(float a[], float p[], long n) { long i; p[0] = a[0]; for (i = 1; i &amp;lt; n - 1; i += 2) { float mid_val = p[i - 1] + a[i]; p[i] = mid_val; p[i + 1] = mid_val + a[i + 1]; } if (i &amp;lt; n) p[i] = p[i - 1] + a[i]; } 统计两个函数的在不同 n 的情况下的执行周期可以得到 psum1 的运行时间近似为 368 + 9.</description></item><item><title>cs:app attacklab 记录</title><link>https://lza852.com/posts/2021-08-23-csapp-3/</link><pubDate>Mon, 23 Aug 2021 08:35:00 +0800</pubDate><guid>https://lza852.com/posts/2021-08-23-csapp-3/</guid><description>代码在此
常见的攻击方式 缓存区溢出 由于C不对数组边界进行检查，当在栈上为数组分配空间时，如果写入的数据超过了数组空间，就会覆盖栈中存储的状态信息。通常使用字符串缓存区溢出来实现。
char *gets(char* s) { int c; char *dest = s; // 没有对边界进行检查 while ((c = getchar()) != &amp;#39;\n&amp;#39; &amp;amp;&amp;amp; c != EOF) *dest++ = c; if (c == EOF &amp;amp;&amp;amp; dest == s) return NULL; *dest++ = &amp;#39;\0&amp;#39;; return s; } 生成的汇编代码如下
echo: subq $24, %rsp movq %rsp, %rdi call gets movq %rsp, %rdi call puts addq $24, %rsp ret 根据汇编代码可以看出，函数分配了24字节的栈空间，因此如果写入的字符串超过了24个字符，那么栈中的返回地址就会被覆盖；如果超过了32字节（24+8），那么调用者中保存的状态也会被覆盖。（栈中保存的数据格式参考这里）
攻击形式 可以在溢出的字符串中包含指向特定可执行代码的指针，用来覆盖返回地址，那么就可以在函数结束后跳转到指定的函数执行。
对抗方法 栈随机化</description></item><item><title>cs:app 第三章 &amp; bomblab 记录</title><link>https://lza852.com/posts/2021-08-17-csapp-2/</link><pubDate>Tue, 17 Aug 2021 10:22:36 +0800</pubDate><guid>https://lza852.com/posts/2021-08-17-csapp-2/</guid><description>这里可以找到实验代码
程序代码的汇编表示 寄存器 整数寄存器 条件码寄存器 CF：进位标志，表示最高位产生了进位 ZF：零标志，最近的操作结果为0 SF：符号标志，最近的操作结果为负数 OF：溢出标志，导致补码溢出，正溢出或负溢出 栈寄存器 栈指针%rsp保存栈顶元素的数据，将数据压入栈是将%rsp-8，然后存储数据；弹出栈是将M[%rsp]取出，然后%rsp+8。
编译器会为每个函数计算需要的栈空间，然后在函数的开头对%rsp进行减操作，分配栈空间，在函数结束返回的时候对%rsp加操作，恢复栈空间
pc寄存器 %rip代表指令计数器，表示当前执行指令的地址
ATT与Intel格式的区别 ATT是AT&amp;amp;T提出的汇编代码格式，GCC、OBJDUMP等工具的默认格式。而Intel格式是Intel提出的，通常用于Microsoft的工具和Intel自身的文档。
两者区别是
Intel省略了指示大小的后缀，例如l，q等 Intel省略了寄存器的‘%’前缀 Intel使用QWORD PTR [rbx]来表示内存位置，而不是(rbx)这种形式 在带有多个操作数的情况下，操作数的顺序相反，即目的寄存器在前，源寄存器在后。 在gcc生成汇编代码的时候，可以使用-masm=intel选项指定生成Intel格式的汇编代码，默认是ATT格式。
常见指令 条件指令 常见TEST %rax, %rax，判断%rax是否等于0，如果等于0，会设置ZF标志位，如果后跟je指令，就满足条件，跳转
跳转指令 在跳转的时候，有些指令会采用PC相对寻址，即指令编码中只记录offset，实际跳转的目的指令地址是next PC + offset，即下一条指令地址+offset，而不是当前PC的值
算术运算 add S,D -&amp;gt; D = D + S
sub S,D -&amp;gt; D = D - S
数据传送 mov S,D -&amp;gt; D = S
注意movl传送四字节，会将高位四字节设置为0，这样是因为 x86-64 的惯例是任何为寄存器生成 32 位值的指令都会把该寄存器的高位部分置成0。
读取有效地址 lea并不会从指定地址读取数据到目的位置，而是将地址存储到目的位置
操作数指示符 栈帧 x86-64提供六个寄存器用于函数参数传递（%rdi, %rsi, %rdx, %rcx, %r8, %r9），每一个调用的函数都会事先在栈上开辟空间，填入需要存储的变量。</description></item><item><title>cs:app 第二章 &amp; datalab 记录</title><link>https://lza852.com/posts/2021-08-14-csapp-1/</link><pubDate>Wed, 11 Aug 2021 14:27:13 +0800</pubDate><guid>https://lza852.com/posts/2021-08-14-csapp-1/</guid><description>这里可以找到实验代码
阅读笔记 字长 字长（word size）指的是指针数据的大小，也就是内存一次周期能读取到的数据长度。通常我们说的32bits/64bits就指的是字长。但是在微软API里面，定义WORD为16bits（为了对应Intel 8086最开始的时候16bits的字长），还有DWORD（32bits）和QWORD（64bits）。
布尔运算及定律 吸收律：$A+(A * B) = A$，$A * (A + B) = A$
分配律：$A(B+C) = AB + AC$，$A+(B*C) = (A+B)(A+C)$
德摩根定律：$\overline{AB} = \bar{A}+\bar{B}$​​​，$\overline{A+B} = \bar{A}\bar{B}$
异或 异或可以由与或非组合得出，即
a ^ b
= ~a · b + a · ~b
= a * ~a + b * ~b + ~a * b + a * ~b = (a + b) * (~a + ~b)</description></item></channel></rss>